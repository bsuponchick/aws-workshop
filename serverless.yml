service: avigram

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs12.x
  logs:
    restApi: true
  
functions:
  getUser:
    handler: api/GetUser.handler
    description: Gets a user from the Users table
    timeout: 30
    role: GetUserLambdaExecutionRole
    events:
      - http:
          path: /users
          method: get
          request:
            parameters:
              querystrings:
                username: true
  getPosts:
    handler: api/GetPosts.handler
    description: Gets posts for a user from the Posts table
    timeout: 30
    role: GetPostsLambdaExecutionRole
    events:
      - http:
          path: /posts
          method: get
          request:
            parameters:
              querystrings:
                username: true
  follow:
    handler: api/Follow.handler
    description: Update an item in the Users table to follow a new user
    timeout: 30
    role: FollowLambdaExecutionRole
    events:
      - http:
          path: /follow
          method: get
          request:
            parameters:
              querystrings:
                username: true
                follow: true

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "avigram.suponchick.com"
        WebsiteConfiguration:
          ErrorDocument: "index.html"
          IndexDocument: "index.html"
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Bucket
        PolicyDocument:
          Version: "2008-10-17"
          Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt: Bucket.Arn
                  - "/*"

    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true

    PostsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Posts
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true

    DefaultPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:service.name}-default
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: !Join
                - ':'
                - - 'arn:aws:logs'
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - 'log-group:/aws/lambda/${self:service.name}*:*:*'
    
    UsersTableGetItemPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:service.name}-users-getItem
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: 
                Fn::GetAtt: UsersTable.Arn
    
    UsersTablePutItemPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:service.name}-users-putItem
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: 
                Fn::GetAtt: UsersTable.Arn

    PostsTableScanPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:service.name}-posts-scan
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: 
                Fn::GetAtt: PostsTable.Arn

    GetUserLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service.name}-getUserLambdaExecutionRole
        ManagedPolicyArns:
          - Ref: DefaultPolicy
          - Ref: UsersTableGetItemPolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

    GetPostsLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service.name}-getPostsLambdaExecutionRole
        ManagedPolicyArns:
          - Ref: DefaultPolicy
          - Ref: UsersTableGetItemPolicy
          - Ref: PostsTableScanPolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

    FollowLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service.name}-followLambdaExecutionRole
        ManagedPolicyArns:
          - Ref: DefaultPolicy
          - Ref: UsersTableGetItemPolicy
          - Ref: UsersTablePutItemPolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole